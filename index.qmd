---
title: "Mineria de datos"
format:
  html:
    code-fold: true
    code-summary: "Ver codigo"
---

## Carga de datos

```{python}
from ucimlrepo import fetch_ucirepo 
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from scipy import stats
import numpy as np

auto_mpg = fetch_ucirepo(id=9) 

# data (as pandas dataframes) 

data = pd.concat([auto_mpg.data.features, auto_mpg.data.targets], axis=1, join='outer')
```

## En qué consiste este dataset y sus características

Los datos se refieren al consumo de combustible en millas por galón en ciudad, que se puede predecir en función de 3 atributos discretos multivariados y 5 atributos continuos.

1.  mpg: (millas por galon) continua
2.  cylinders: (cilindros) multi valuada discreta
3.  displacement: (desplazamiento) continua
4.  horsepower: (caballos de fuerza) continua
5.  weight: (peso) continua
6.  acceleration: (acelearación) continua
7.  model_year: (año modelo) multi valuada discreta
8.  origin: (origen) multi valuada discreta

Este dataset consiste de 398 filas y 8 columnas

## Análisis exploratorio para identificar la distribución de las variables usadas en la base de datos

### Variables continuas

```{python echo=FALSE}
for col in ["displacement", "horsepower", "weight", "acceleration"]:
  # Create a scatterplot of --- vs 'acceleration'
  sns.scatterplot(x=col, y='mpg', data=data)
  
  # Add labels and title
  plt.xlabel(f"{col}")
  plt.ylabel(f"mpg")
  plt.title(f"Grafica de dispersión {col} vs mpg")
  
  # Display the plot
  plt.show()
  
```

```{python}
# List of variables to plot
X = ['displacement', 'horsepower', 'weight', 'acceleration']

# Create a correlation matrix
corr = data[X + ['mpg']].corr(method = "spearman")


# Set up the matplotlib figure
plt.figure(figsize=(8, 6))

# Draw the heatmap with the mask and annotations
sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1,
            xticklabels=X + ['mpg'], yticklabels=X + ['mpg'])

# Add labels
plt.title('Correlación: Variables vs. MPG', fontsize=14)
plt.xlabel('Variables', fontsize=12)
plt.ylabel('Variables', fontsize=12)

# Show the plot
plt.show()
```

### Variables categoricas

```{python echo=FALSE}
for col in ["model_year", "origin", "cylinders"]:
  
  sns.violinplot(x=col, y='mpg', bw_adjust=.5, inner="stick", data=data)
  # Add labels and title
  plt.xlabel(f"{col}")
  plt.ylabel(f"mpg")
  plt.title(f"Grafica de dispersión {col} vs mpg")
  
  # Display the plot
  plt.show()
  
```

## Datos faltantes en cada uno de las variables.

Porcentaje de NA's para cada columna

```{python echo=FALSE}
from itables import show
tbl = data.isna().sum()/data.shape[0]*100

show(tbl)
```

## ¿Cuál cree que es el mecanismo inherente a esos datos faltantes?

Solo la columna "horsepower" contiene datos faltantes, esta columna contiene los caballos de fuerza de cada automóvil.

## Técnicas de tratamiento de datos faltantes (vistas en clase)

ok

## Variación en la distribución de los datos al aplicar las técnicas de imputación de datos

¿Qué técnica afecta menos la distribución original?
